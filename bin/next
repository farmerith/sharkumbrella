#! /bin/python -B

import os
import sys
import random
import subprocess
from pathlib import Path
from datetime import datetime, timedelta

import shum

RANDOMNESS_FACTOR = 0.3
MAX_INTERVAL = 90 

def fuzz(interval):
    if interval <= 10:
        return interval * random.uniform(0.9, 1.5)

    return interval * random.uniform(0.9, 1.1)

def get_all_files(directory):
    return [os.path.join(root, file) for root, _, files in os.walk(directory) for file in files]

def set_last_modified(path):
    timestamp = datetime.now().timestamp()
    os.utime(path, (timestamp, timestamp))

def get_next_due(next_due, prev_due): # sm2 with a constant factor
    prev_interval = (datetime.fromtimestamp(next_due) - datetime.fromtimestamp(prev_due)).days
    prev_interval = max(1, prev_interval)

    next_interval = prev_interval * shum.A_FACTOR
    next_interval = min(next_interval, MAX_INTERVAL) # max_interval 
    next_interval = fuzz(next_interval) # fuzz
    return (datetime.now() + timedelta(days=next_interval)).timestamp()

def update_scheduling(data, entry):
    prev_due = data[entry].get('prev_due', datetime.now().timestamp())
    next_due = data[entry].get('next_due', datetime.now().timestamp())
    data[entry]['next_due'] = get_next_due(next_due, prev_due)
    data[entry]['prev_due'] = datetime.now().timestamp()
    return data

def priority_sort(files):
    sorted_files = []

    for path in files:
        path = Path(path).resolve()
        entry = shum.relative_path(path)

        if not shum.is_in_coll(path):
            continue

        if random.random() <= RANDOMNESS_FACTOR:
            sorted_files.append([random.uniform(0, 3), path])
            continue

        priority = data.get(entry, {}).get('priority', 'low')

        if priority not in ('high', 'medium', 'low'):
            priority = 'low'

        if priority == 'low': r = [0, 1]   
        elif priority == 'medium': r = [1, 2]
        elif priority == 'high': r = [2, 3]
        sorted_files.append([random.uniform(*r), path])

    sorted_files.sort(reverse=True) 
    return [path for priority, path in sorted_files]

if __name__ == '__main__':
    files = get_all_files(shum.COLLECTION)
    data = shum.load_data()

    for path in priority_sort(files):
        entry = shum.relative_path(path)

        # checks 
        if not shum.is_in_coll(path):
            continue

        if entry not in data:
            data[entry] = {'timestamp': datetime.now().timestamp()}

        atime = datetime.fromtimestamp(os.path.getatime(path)).date()
        if atime == datetime.now().date():
            continue
        
        if data[entry].get('archived'):
            continue

        next_due = data[entry].get('next_due')
        if next_due is not None and datetime.fromtimestamp(next_due).date() > datetime.now().date():
            continue

        data = update_scheduling(data, entry)

        # update scheduling
        shum.safe_write(data, shum.DATABASE)

        # system updates
        set_last_modified(path)

        ## cat/ret script
        with open('/tmp/capture.out', 'a') as f:
            f.write(f'{str(path)}\n')

        # open
        subprocess.run(['xdg-open', str(path)])

        # show stats
        ## next_due
        next_due = data[entry].get('next_due')
        next_due_readable = datetime.fromtimestamp(next_due).strftime('%Y/%m/%d') if next_due else None
        print(f'next_due={next_due_readable}')

        ## interval
        prev_due = data[entry].get('prev_due', datetime.now().timestamp())
        next_due = data[entry].get('next_due', datetime.now().timestamp())
        interval = (datetime.fromtimestamp(next_due) - datetime.fromtimestamp(prev_due)).days
        interval = max(1, interval)
        print(f'interval={interval}')
            
        ## priority
        priority = data[entry].get('priority', 'low')
        print(f'priority={priority}')

        ## context
        context = data[entry].get('context')
        print(f'context={context}')

        ## path
        print(f'path={path}')

        break
